---
layout: post
title: "Kioptrix 4"
date: 2020-09-20 13:30:00 -0600
categories: VulnHub OSCP
tags: VulnHub Kioptrix SQLi mysql
---

Similar to the first 3 Kioptrix machines but this just provides a raw VHD, you can create a new image and import the disc after downloading it [here](https://www.vulnhub.com/entry/kioptrix-level-13-4%2C25/).

## Enumeration

Running AutoRecon on this target reveals SSH and HTTP server again along with ports for SMB. AutoRecon provides us with some automated scans for SMB and I didn't really see anything of interest there. Back to enumerating the website again, we can see that the default scans show a couple of subfolders that don't contain much information but the folder `john` might be of interest as a potential username. We can see that the root of the web-server presents us with a login screen. We've seen SQLi a couple of times already, so let's give it a shot.

![login.png](/assets/images/k4_login.png)

Trying to inject into the username field doesn't show any error messages and we get a standard Invalid Username or Password message. We can also try injecting into the password field. If we login with the following credentials we can see that there is in fact an SQL Injection in the password field.

    Username: john
    Password: ' or 1=1 #

This leads us to the members.php page that appeared in our scans earlier but didn't have any use for us. We can see this page exposes the plain text password for the user john.

![password](/assets/images/k4_password.png)

## Elevate

Now that we have a username and password we can try to ssh into the machine like we did with the last box. Using the credentials that we got from the website we are able to successfully login to the server. We know that there is a database on the server so let's see if we can grab the credentials from the PHP login page and see who the mysql server is running as.

Now that we are logged into the server we can see that we are running in a restricted shell limited to a few commands. We need to figure out how we can upgrade this shell. We can run the echo command so we can try a simple `echo os.system('/bin/bash')`. We can see the full process in the screenshot below.

![upgrade](/assets/images/k4_upgrade.png)

Now that we have full access to a shell we can get the credentials for the mysql database by looking at the `checklogin.php` code. We can see there the connection to the database is the `root` user with no password.

![database connection](/assets/images/k4_database_connection.png)

We can also confirm that the mysql processes are running as root, this means we should be able to use mysql to execute commands to run as root. I was able to use the guide found [here](https://www.adampalmer.me/iodigitalsec/2013/08/13/mysql-root-to-system-root-with-udf-for-windows-and-linux/). Most of the exploit was already working, all we really needed to do was a simple `select sys_exec('chmod u+s /bin/bash');` from the mysql prompt to set the suid bit on the bash binary and run it with `bash -p` to get our root shell. Let this be a lesson in why you never run a service as root.

![elevate](/assets/images/k4_whoami.png)
